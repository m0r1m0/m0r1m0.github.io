{"pageProps":{"date":"2021年03月06日","title":"ブランチ間の変更行数を出す","content":"<p>ってググればでる。</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span> --numstat --pretty=<span class=\"hljs-string\">\"%H\"</span> branch1..branch2  | awk <span class=\"hljs-string\">'NF==3 {plus+=$1; minus+=$2} END {printf(\"+%d, -%d\\n\", plus, minus)}'</span></code></pre>\n<p>参考：<a href=\"https://stackoverflow.com/questions/2528111/how-can-i-calculate-the-number-of-lines-changed-between-two-commits-in-git/2528129#2528129\">How can I calculate the number of lines changed between two commits in Git?</a></p>\n<p>ただ内容が理解できないし、理解できていないのはキモいので紐解く。</p>\n<h2><code>--numstat</code></h2>\n<blockquote>\n<p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/docs/git-log#Documentation/git-log.txt---numstat\">--numstat｜https://git-scm.com</a></p>\n<p><code>--stat</code>？</p>\n<blockquote>\n<p>Generate a diffstat.</p>\n</blockquote>\n<p><a href=\"https://git-scm.com/docs/git-log#Documentation/git-log.txt---numstat\">--stat｜https://git-scm.com</a></p>\n<p>diffstatはdiff結果から各ファイルの追加・削除行数をまとめて出してくれるやつぽい。</p>\n<p>つまり、<code>—numstat</code>はそのdiffstatを<code>追加行数 削除行数 ファイルパス</code>形式で出力してくれる。</p>\n<h2><code>--pretty</code></h2>\n<p>コミットログをprettyで指定した形式で表示する。例えば、<code>%H</code> はコミットハッシュ。</p>\n<p>つまり、<code>git log —numstat —pretty=\"%H\"</code> は以下のような出力になる</p>\n<pre><code class=\"hljs language-bash\">f7cc64ff097f165df3ac457acac183f377acdc0c\n\n16      0       package-lock.json\n2       1       package.json\n34      21      src/index.ts\ne6490bc5ec9da0da9419acfc28186638e9ad6255\n\n1       1       README.md</code></pre>\n<p>で、次はパイプ以降何をしているのか見ていく。</p>\n<h2><code>awk</code></h2>\n<p>空白もしくは<code>-F</code>オプションで指定した正規表現にマッチする文字で区切られた文字列を処理するコマンド。\n<a href=\"https://www.atmarkit.co.jp/ait/articles/1706/02/news017.html\">【 awk 】コマンド（基本編）――テキストの加工とパターン処理を行う</a></p>\n<p><code>パターン{アクション}</code>の形式で指定した処理をしていく。</p>\n<p>例えば、<code>NF==3 {plus+=$1; minus+=$2}</code>のパターン<code>NF==3</code>は、空白で区切られた文字列の数が3つの行を指す。<code>—-numstat</code> は追加行数、削除行数、ファイルパスが空白で区切られてるので、一致する。つまり、追加行数、削除行数、ファイルパスの行で、plus、minusという変数に追加・削除行数を足し込む、という処理になる。</p>\n<p>また、ENDは最終行のあと、というパターン。つまり、<code>END {printf(\"+%d, -%d\\n\", plus, minus)}</code>は最終行まで処理したあと、<code>\"+%d, -%d\\n\"</code>形式でそれぞれ追加行数、削除行数を出力するという処理になる。</p>\n<p>なるほど、たしかに<code>git log --numstat --pretty=\"%H\" branch1..branch2  | awk 'NF==3 {plus+=$1; minus+=$2} END {printf(\"+%d, -%d\\n\", plus, minus)}'</code>がブランチ間の変更行数を出すことがわかった。</p>\n<p>ただ、<code>--pretty</code>でわざわざ<code>%H</code>とする必要性はないように思う。コミットハッシュは最終的な出力に関係ないので。コミットに関する情報は消して、各ファイルの変更行数情報だけが出力されればおｋである。つまり、完成形としては、以下のようになる。</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span> --numstat --pretty=<span class=\"hljs-string\">\"\"</span> branch1..branch2  | awk <span class=\"hljs-string\">'NF==3 {plus+=$1; minus+=$2} END {printf(\"+%d, -%d\\n\", plus, minus)}'</span></code></pre>\n","ogp":{"title":"ブランチ間の変更行数を出す","description":"ってググればでる。"}},"__N_SSG":true}