{"pageProps":{"date":"2021年03月21日","title":"RDBで階層構造をあつかう","content":"<p>例えばTODOアプリにおいて、親タスク、子タスク、孫タスク...のようにタスクを作成できる機能があるとする。その関係性をどうDBに保存するのかいまいちわからなかったので調べた。</p>\n<p>よく知られている手法としては以下の４つがある</p>\n<ul>\n<li>隣接リスト</li>\n<li>経路列挙</li>\n<li>閉包テーブル</li>\n<li>入れ子集合</li>\n</ul>\n<p>それぞれの手法において、タスクの取得、追加、削除がどういうクエリになるのか見ていく。</p>\n<h2>隣接リスト</h2>\n<p>自分の親タスクのIDを保持する設計</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>parent_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>買い物</td>\n<td>null</td>\n</tr>\n<tr>\n<td>2</td>\n<td>じゃがいも</td>\n<td>1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>にんじん</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>掃除</td>\n<td>null</td>\n</tr>\n<tr>\n<td>5</td>\n<td>風呂</td>\n<td>4</td>\n</tr>\n<tr>\n<td>6</td>\n<td>浴槽</td>\n<td>5</td>\n</tr>\n<tr>\n<td>7</td>\n<td>換気扇</td>\n<td>5</td>\n</tr>\n<tr>\n<td>8</td>\n<td>洗面台</td>\n<td>4</td>\n</tr>\n<tr>\n<td>9</td>\n<td>読書</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<h3>タスクの取得</h3>\n<p>例えば<code>掃除</code>タスク(id = 4)に紐づくタスクの取得は以下のようなクエリになる</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n\t<span class=\"hljs-operator\">*</span>\n<span class=\"hljs-keyword\">FROM</span>\n\ttasks t1\n\t<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">OUTER</span> <span class=\"hljs-keyword\">JOIN</span> tasks t2 <span class=\"hljs-keyword\">ON</span> t1.id <span class=\"hljs-operator\">=</span> t2.parent_id\n\t<span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">OUTER</span> <span class=\"hljs-keyword\">JOIN</span> tasks t3 <span class=\"hljs-keyword\">ON</span> t2.id <span class=\"hljs-operator\">=</span> t3.parent_id\n<span class=\"hljs-keyword\">WHERE</span>\n\tt1.id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>;</code></pre>\n<p>このクエリは、そのタスクが最大何階層あるのかを事前に知っておく必要がある、という問題がある。子タスクのネストに制限がない場合、このクエリは現実的でない。つまり、1クエリで全取得はできない。</p>\n<p>事前に何階層あるかを知らない場合、<code>parent_id</code>にヒットしたレコードのidをいれてヒットしなくなるまで検索していく方法で取得できる。</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> parent_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">-- id 5, 8がヒット</span>\n\n<span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> parent_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">-- id 6, 7がヒット</span>\n\n<span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> parent_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">-- ヒットなし</span></code></pre>\n<p>この方法では、階層が増えれば増えるほどクエリ実行が多くなってしまう。</p>\n<h3>タスクの追加</h3>\n<p>親を指定して足すだけなので特に面倒なポイントはない。</p>\n<p>親タスクの追加</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> tasks (name, parent_id)\n\t\t<span class=\"hljs-keyword\">values</span>(\"勉強\", <span class=\"hljs-keyword\">NULL</span>);</code></pre>\n<p>子タスクの追加</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> tasks (name, parent_id)\n\t\t<span class=\"hljs-keyword\">values</span>(\"排水溝\", <span class=\"hljs-number\">5</span>);</code></pre>\n<h3>タスクの更新</h3>\n<p>親タスクを変更する場合、parent_idを書き換えるだけなので面倒ポイントなし。</p>\n<pre><code class=\"hljs language-sql\">update tasks <span class=\"hljs-keyword\">set</span> parent_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">11</span></code></pre>\n<h3>タスクの削除</h3>\n<p>子を持つ親タスクの削除で、子も含めて削除する場合を考える。そのタスクが持つ子タスクを知る必要があるので、取得と同様、ヒットしなくなるまで検索して子タスクのidを調べる必要がある。</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> parent_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">-- id 5, 8がヒット</span>\n\n<span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> parent_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>); <span class=\"hljs-comment\">-- id 6, 7がヒット</span>\n\n<span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> parent_id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">-- ヒットなし</span>\n\n<span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>);</code></pre>\n<p>ただし、<code>parent_id</code>に外部キー制約で<code>ON DELETE CASCADE</code>を設定しておけば、親を消した段階ですべて消える</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> tasks\n\t<span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">FOREIGN</span> KEY (`parent_id`) <span class=\"hljs-keyword\">REFERENCES</span> tasks (`id`) <span class=\"hljs-keyword\">ON</span> <span class=\"hljs-keyword\">DELETE</span> CASCADE;\n\n<span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> tasks <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>;</code></pre>\n<h3>再帰クエリ</h3>\n<p>再帰クエリを利用すれば、取得クエリの数は減る。詳細は後日書く。</p>\n<p><a href=\"http://interprism.hatenablog.com/entry/fetch-tree-by-recursive-query\">再帰クエリで木構造のデータを取得する</a></p>\n<h2>経路列挙</h2>\n<p>rootまでの経路を<code>/</code>などの文字列で区切って保持する設計</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>path</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>買い物</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>じゃがいも</td>\n<td>1/2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>にんじん</td>\n<td>1/3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>掃除</td>\n<td>4</td>\n</tr>\n<tr>\n<td>5</td>\n<td>風呂</td>\n<td>4/5</td>\n</tr>\n<tr>\n<td>6</td>\n<td>浴槽</td>\n<td>4/5/6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>換気扇</td>\n<td>4/5/7</td>\n</tr>\n<tr>\n<td>8</td>\n<td>洗面台</td>\n<td>4/8</td>\n</tr>\n<tr>\n<td>9</td>\n<td>読書</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<h3>タスクの取得</h3>\n<p>例えば<code>掃除</code>タスク(id = 4)に紐づくタスクの取得は以下のようなクエリになる</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n\t<span class=\"hljs-operator\">*</span>\n<span class=\"hljs-keyword\">FROM</span>\n\ttasks2\n<span class=\"hljs-keyword\">WHERE</span>\n\t`path` <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'4'</span>\n\t<span class=\"hljs-keyword\">OR</span> `path` <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'4/%'</span></code></pre>\n<h3>タスクの追加</h3>\n<p>親タスクの追加。<code>id</code>が<code>auto_increment</code>の場合、まずはpathなしでinsertし、採番されたIDを確認してupdateをかける方法が考えられる。（他になにかいい感じにやれる方法あるんだろうか？）</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> tasks2 (`name`)\n\t\t<span class=\"hljs-keyword\">VALUES</span>(\"親タスク\"); <span class=\"hljs-comment\">-- id 10が採番された</span>\nUPDATE tasks2 <span class=\"hljs-keyword\">SET</span> `path` <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'10'</span> <span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;</code></pre>\n<p>子タスク追加は、親になるタスクの<code>path</code>に自分のidを追加して保存すれば良い。クエリは↑と同様。</p>\n<h3>タスクの削除</h3>\n<p>親とそれに関連する子すべてを削除する場合を考える。</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> tasks2\n<span class=\"hljs-keyword\">WHERE</span> `path` <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">'4'</span>\n\t<span class=\"hljs-keyword\">OR</span> `path` <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'4/%'</span></code></pre>\n<p>手軽に消せる。</p>\n<h2>閉包テーブル</h2>\n<p>親子関係を専用のテーブルで管理する設計。具体的には、以下のようなタスクがあるとき</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>買い物</td>\n</tr>\n<tr>\n<td>2</td>\n<td>じゃがいも</td>\n</tr>\n<tr>\n<td>3</td>\n<td>にんじん</td>\n</tr>\n<tr>\n<td>4</td>\n<td>掃除</td>\n</tr>\n<tr>\n<td>5</td>\n<td>風呂</td>\n</tr>\n<tr>\n<td>6</td>\n<td>浴槽</td>\n</tr>\n<tr>\n<td>7</td>\n<td>換気扇</td>\n</tr>\n<tr>\n<td>8</td>\n<td>洗面台</td>\n</tr>\n<tr>\n<td>9</td>\n<td>読書</td>\n</tr>\n</tbody>\n</table>\n<p>親子関係全パターン(直接の親子だけではない)を管理するテーブルを用意する。</p>\n<table>\n<thead>\n<tr>\n<th>parent_id</th>\n<th>child_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>4</td>\n<td>5</td>\n</tr>\n<tr>\n<td>4</td>\n<td>6</td>\n</tr>\n<tr>\n<td>4</td>\n<td>7</td>\n</tr>\n<tr>\n<td>4</td>\n<td>8</td>\n</tr>\n<tr>\n<td>5</td>\n<td>5</td>\n</tr>\n<tr>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>5</td>\n<td>7</td>\n</tr>\n<tr>\n<td>6</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>7</td>\n</tr>\n<tr>\n<td>8</td>\n<td>8</td>\n</tr>\n<tr>\n<td>9</td>\n<td>9</td>\n</tr>\n</tbody>\n</table>\n<h3>タスクの取得</h3>\n<p><code>掃除</code>タスク(id = 4)に紐づくタスクの取得</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">SELECT</span>\n\t<span class=\"hljs-operator\">*</span>\n<span class=\"hljs-keyword\">FROM</span>\n\ttasks3 <span class=\"hljs-keyword\">AS</span> t\n\t<span class=\"hljs-keyword\">INNER</span> <span class=\"hljs-keyword\">JOIN</span> task_hierarchie <span class=\"hljs-keyword\">AS</span> h <span class=\"hljs-keyword\">ON</span> t.id <span class=\"hljs-operator\">=</span> h.child_id\n<span class=\"hljs-keyword\">WHERE</span>\n\th.parent_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>;</code></pre>\n<p>閉包テーブル(<code>task_hierarchie</code>)の<code>parent_id</code>=4を探すだけでいい。</p>\n<h3>タスク追加</h3>\n<p>一番上の階層にタスクを足す場合</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> tasks (`name`)\n\t\t<span class=\"hljs-keyword\">VALUES</span>(\"散歩\");\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> task_hierarchie\n\t\t<span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);</code></pre>\n<p>子タスクの追加。子タスク自身のidと、子を足す対象の親全てに子のidを足す。例えば、掃除/風呂(id=5)の子に排水溝を足す場合、親である、掃除(id=4)と風呂(id=5)それぞれに排水溝のidのパターンを追加する。また</p>\n<p>対象のすべての親を探すとき、<code>task_hierarchie</code>の<code>child_id</code>が対象idと一致の条件で検索すればよい。</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> tasks (`name`)\n\t\t<span class=\"hljs-keyword\">VALUES</span>(\"排水溝\"); <span class=\"hljs-comment\">-- id=10</span>\n\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> task_hierarchie\n<span class=\"hljs-keyword\">SELECT</span>\n\th.parent_id,\n\t<span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">FROM</span>\n\ttask_hierarchie <span class=\"hljs-keyword\">AS</span> h\n<span class=\"hljs-keyword\">WHERE</span>\n\th.child_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>\n<span class=\"hljs-keyword\">UNION</span> <span class=\"hljs-keyword\">ALL</span>\n<span class=\"hljs-keyword\">SELECT</span>\n\t<span class=\"hljs-number\">10</span>,\n\t<span class=\"hljs-number\">10</span>;</code></pre>\n<h3>タスク削除</h3>\n<p>掃除タスク(id=4)を削除する場合</p>\n<pre><code class=\"hljs language-sql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> tasks3\n<span class=\"hljs-keyword\">WHERE</span> id <span class=\"hljs-keyword\">IN</span>(\n\t\t<span class=\"hljs-keyword\">SELECT</span>\n\t\t\tchild_id <span class=\"hljs-keyword\">FROM</span> task_hierarchie\n\t\t<span class=\"hljs-keyword\">WHERE</span>\n\t\t\tparent_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>);\n\n<span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> task_hierarchie\n<span class=\"hljs-keyword\">WHERE</span> parent_id <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4</span>;</code></pre>\n<h2>入れ子集合</h2>\n<p>後で書く。</p>\n<p><a href=\"https://mickindex.sakura.ne.jp/database/db_tree_ns.html\">SQLで木と階層構造のデータを扱う（１）―― 入れ子集合モデル</a></p>\n<h2>まとめ</h2>\n<p>隣接リストは、階層上限がある、かつ深くならない場合において利用できる。が、しかし上限を深くしたくなったときにキツイ。</p>\n<p>経路列挙は経路が文字列で、正しくないパスがinsertされてしまう可能性を考えるとキツイ。また、auto_incrementのとき一度insertしてidを確認してupdateする必要があるのも面倒。</p>\n<p>閉包テーブルはデータ量が多くなってしまいがちだが、手間なく各種操作ができるので有用に感じた。</p>\n<p>個人的に作成しているアプリケーションで階層構造を考える必要があり、調べてみた。要件として上限が決まっている、かつ浅いので隣接リストか閉包テーブルを利用するのが妥当と判断。使い勝手と今後上限をなくしても問題ないことから、最終的には閉包テーブルを選択した。</p>\n","ogp":{"title":"RDBで階層構造をあつかう","description":"例えばTODOアプリにおいて、親タスク、子タスク、孫タスク...のようにタスクを作成できる機能があるとする。その関係性をどうDBに保存するのかいまいちわからなかったので調べた。"}},"__N_SSG":true}